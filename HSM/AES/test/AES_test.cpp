#include <array>
#include <cstdint>
#include <gtest/gtest.h>

#include "AES_block_encrypt.hpp"
#include "AES_chaining_stream.hpp"

using namespace aes;

using AES_State = AES_block_encrypt::State;

static std::array<std::array<uint8_t, 4>, 4>
strToStateBlock(std::string const &str_block) {
  std::array<std::array<uint8_t, 4>, 4> state;
  assert(str_block.size() == 16);
  for (int i = 0; i < 4; ++i) {
    for (int j = 0; j < 4; ++j) {
      state[i][j] = str_block[i * 4 + j];
    }
  }
  return state;
}

static std::vector<uint8_t> strToVector(std::string const &str) {
  std::vector<uint8_t> result;
  for (int i = 0; i < str.size(); ++i) {
    result.push_back(str[i]);
  }
  return result;
}

TEST(AesTest, Aes_128_encrypt_decrypt_block) {
  // The test case below is taken from:
  // https://csrc.nist.gov/files/pubs/fips/197/final/docs/fips-197.pdf
  std::array<uint8_t, 16> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae,
                                 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
                                 0x09, 0xcf, 0x4f, 0x3c};
  AES_State block =
      {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
  AES_State expected_encrypted_block =
      {0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32};

  AES_block_encrypt_128 aes(key);
  auto encrypted_block = block;
  aes.encrypt(encrypted_block);
  EXPECT_EQ(encrypted_block, expected_encrypted_block);

  auto &expected_decrypted_block = block;
  auto &decrypted_block = expected_encrypted_block;

  aes.decrypt(decrypted_block);
  EXPECT_EQ(decrypted_block, expected_decrypted_block);
}

TEST(AesTest, Aes_128_ecb_encrypt_decrypt_string_with_size_16) {
  std::array<uint8_t, 16> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae,
                                 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
                                 0x09, 0xcf, 0x4f, 0x3c};
  std::vector<uint8_t> msg = strToVector( "hello hello hsm!");
  std::vector<uint8_t> expected_encrypted_msg = {
      0xc2, 0x9e, 0x26, 0xc2, 0x8e, 0xdc, 0x25, 0x33, 0x44,
      0x28, 0xe6, 0xa3, 0xe2, 0x72, 0x2d, 0xd2, 0xa2, 
      0x54, 0xbe, 0x88, 0xe0, 0x37, 0xdd, 0xd9, 0xd7, 
      0x9f, 0xb6, 0x41, 0x1c, 0x3f, 0x9d, 0xf8};
  AES_block_encrypt_128 aes(key);
  EXPECT_EQ(AES_ChainingStream::encrypt_ecb(aes, msg), expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(aes, expected_encrypted_msg), msg);
}

TEST(AesTest, Aes_128_ecb_encrypt_decrypt_string_with_size_15) {
  std::array<uint8_t, 16> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae,
                                 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
                                 0x09, 0xcf, 0x4f, 0x3c};
  std::vector<uint8_t> msg = strToVector("hello hello hsm");
  std::vector<uint8_t> expected_encrypted_msg = {
      0xbb, 0x6e, 0xd0, 0xed, 0x30, 0xfa, 0x44, 0x64, 0xd2, 0x1f, 0xf1, 0xcb, 0xd9, 0x27, 0xf9, 0x56};
  AES_block_encrypt_128 aes(key);
  auto result = AES_ChainingStream::encrypt_ecb(aes, msg);

  EXPECT_EQ(result.size(), expected_encrypted_msg.size());

  EXPECT_EQ(result, expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(aes, expected_encrypted_msg), msg);
}

TEST(AesTest, Aes_128_ecb_encrypt_decrypt_empty_string) {
  std::array<uint8_t, 16> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae,
                                 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
                                 0x09, 0xcf, 0x4f, 0x3c};
  std::vector<uint8_t> msg {};
  std::vector<uint8_t> expected_encrypted_msg = {
      0xa2, 0x54, 0xbe, 0x88, 0xe0, 0x37, 0xdd, 0xd9, 0xd7, 0x9f, 0xb6, 0x41, 0x1c, 0x3f, 0x9d, 0xf8};
  AES_block_encrypt_128 aes(key);
  auto result = AES_ChainingStream::encrypt_ecb(aes, msg);

  EXPECT_EQ(result, expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(aes, expected_encrypted_msg), msg);
}

TEST(AesTest, Aes_256_ecb_encrypt_decrypt_I) {
  std::array<uint8_t, 32> key = {
      0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
      0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,
      0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60};
  std::vector<uint8_t> msg = strToVector("hello hello hsm");
  std::vector<uint8_t> expected_encrypted_msg = {
      0x23, 0x80, 0xEB, 0x34, 0xD4, 0xBE, 0x2F, 0x79, 0x46, 0x38, 0x64, 0xD4, 0x2F, 0x46, 0x41, 0xF8};
  AES_block_encrypt_256 aes(key);
  auto result = AES_ChainingStream::encrypt_ecb(aes, msg);

  EXPECT_EQ(result, expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(aes, expected_encrypted_msg), msg);
}

TEST(AesTest, Aes_256_ecb_encrypt_decrypt_II) {
  std::array<uint8_t, 32> key = {
      0xbb, 0x85, 0x57, 0x2b, 0x2b, 0x82, 0xce, 0xc0, 0x93, 0x3b, 0xa9,
      0x38, 0x55, 0x77, 0x9b, 0xd3, 0xd4, 0xca, 0xd5, 0x93, 0x5f, 0xc0,
      0x84, 0x85, 0x8d, 0xc3, 0x71, 0xb0, 0x65, 0x4a, 0x60, 0x31};
  std::vector<uint8_t> msg = strToVector("Advanced Encryption Standard");
  std::vector<uint8_t> expected_encrypted_msg {
      0x0b, 0x16, 0xb2, 0x5c, 0xbc, 0xf2, 0xd2, 0x91, 0xd8, 0x86, 
      0xf3, 0xbb, 0x91, 0x5e, 0xc3, 0xf6, 0x1c, 0xfa,   
      0xbc, 0xce, 0xab, 0x9e, 0xe8, 0xdd, 0x92, 0x6d, 0x68, 0x23, 0x96, 0x40, 0x51, 0x3c};
  AES_block_encrypt_256 aes(key);
  auto result = AES_ChainingStream::encrypt_ecb(aes, msg);

  EXPECT_EQ(result, expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(aes, expected_encrypted_msg), msg);
}


#if SYCL_ENABLED
#include <sycl/sycl.hpp>
sycl::queue q;

TEST(AesTest, Aes_128_ecb_encrypt_decrypt_string_with_size_15_sycl) {
  std::array<uint8_t, 16> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae,
                                 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
                                 0x09, 0xcf, 0x4f, 0x3c};
  std::vector<uint8_t> msg = strToVector( "hello hello hsm");
  std::vector<uint8_t> expected_encrypted_msg = {
      0xbb, 0x6e, 0xd0, 0xed, 0x30, 0xfa, 0x44, 0x64, 0xd2, 0x1f, 0xf1, 0xcb, 0xd9, 0x27, 0xf9, 0x56};
  AES_block_encrypt_128 aes(key);
  auto encrypted_msg = AES_ChainingStream::encrypt_ecb(q, aes, msg);
  EXPECT_EQ(encrypted_msg, expected_encrypted_msg);

  auto decrypted_msg = AES_ChainingStream::decrypt_ecb(q, aes, expected_encrypted_msg);
  EXPECT_EQ(decrypted_msg, msg);
}

TEST(AesTest, Aes_128_ecb_encrypt_decrypt_empty_string_sycl) {
  std::array<uint8_t, 16> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae,
                                 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
                                 0x09, 0xcf, 0x4f, 0x3c};
  std::vector<uint8_t> msg {};
  std::vector<uint8_t> expected_encrypted_msg {
      0xa2, 0x54, 0xbe, 0x88, 0xe0, 0x37, 0xdd, 0xd9, 0xd7, 0x9f, 0xb6, 0x41, 0x1c, 0x3f, 0x9d, 0xf8};
  AES_block_encrypt_128 aes(key);
  auto encrypted_msg = AES_ChainingStream::encrypt_ecb(q, aes, msg);

  EXPECT_EQ(encrypted_msg, expected_encrypted_msg);

  auto decrypted_msg = AES_ChainingStream::decrypt_ecb(q, aes, expected_encrypted_msg);

  EXPECT_EQ(decrypted_msg, msg);
}

TEST(AesTest, Aes_256_ecb_encrypt_decrypt_I_sycl) {
  std::array<uint8_t, 32> key = {
      0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
      0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,
      0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60};
  std::vector<uint8_t> msg = strToVector("hello hello hsm");
  std::vector<uint8_t> expected_encrypted_msg {
      0x23, 0x80, 0xEB, 0x34, 0xD4, 0xBE, 0x2F, 0x79, 0x46, 0x38, 0x64, 0xD4, 0x2F, 0x46, 0x41, 0xF8};
  AES_block_encrypt_256 aes(key);
  auto result = AES_ChainingStream::encrypt_ecb(q, aes, msg);

  EXPECT_EQ(result, expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(q, aes, expected_encrypted_msg), msg);
}

TEST(AesTest, Aes_256_ecb_encrypt_decrypt_II_sycl) {
  std::array<uint8_t, 32> key = {
      0xbb, 0x85, 0x57, 0x2b, 0x2b, 0x82, 0xce, 0xc0, 0x93, 0x3b, 0xa9,
      0x38, 0x55, 0x77, 0x9b, 0xd3, 0xd4, 0xca, 0xd5, 0x93, 0x5f, 0xc0,
      0x84, 0x85, 0x8d, 0xc3, 0x71, 0xb0, 0x65, 0x4a, 0x60, 0x31};
  std::vector<uint8_t> msg = strToVector("Advanced Encryption Standard");
  std::vector<uint8_t> expected_encrypted_msg = {
      0x0b, 0x16, 0xb2, 0x5c, 0xbc, 0xf2, 0xd2, 0x91, 0xd8, 0x86, 0xf3, 0xbb, 0x91, 0x5e, 0xc3, 0xf6, 0x1c, 0xfa, 
      0xbc, 0xce, 0xab, 0x9e, 0xe8, 0xdd, 0x92, 0x6d, 0x68, 0x23, 0x96, 0x40, 0x51, 0x3c};
  AES_block_encrypt_256 aes(key);
  auto result = AES_ChainingStream::encrypt_ecb(q, aes, msg);

  EXPECT_EQ(result, expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_ecb(q, aes, expected_encrypted_msg), msg);
}


TEST(AesTest, Aes_128_ctr_encrypt_decrypt_string_with_size_16_sycl) {
/*
  This test case is Test Vector #1 in:
  https://datatracker.ietf.org/doc/html/rfc3686
*/
  std::array<uint8_t, 16> key = {0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC, 0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E};
  std::array<uint8_t, 8> iv = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  std::array<uint8_t, 4> nonce = {0x00, 0x00, 0x00, 0x30};
  Aes<AesVariant::Aes128> aes(key);
  std::vector<uint8_t> msg = strToVector("Single block msg");
  std::vector<uint8_t> expected_encrypted_msg {
    0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79, 0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8};
  std::vector<uint8_t> encrypted_msg = AES_ChainingStream::encrypt_ctr(q, aes, iv, nonce, msg);

  EXPECT_EQ(encrypted_msg, expected_encrypted_msg) << "encrypt";
  EXPECT_EQ(AES_ChainingStream::encrypt_ctr(q, aes, iv, nonce, encrypted_msg), msg) << "decrypt back";
}


TEST(AesTest, Aes_128_ctr_encrypt_decrypt_string_36_size_sycl) {
/*
  This test case is Test Vector #3 in:
  https://datatracker.ietf.org/doc/html/rfc3686
*/
  std::array<uint8_t, 16> key {0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8, 0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC};
  std::array<uint8_t, 8> iv {0x27, 0x77, 0x7F, 0x3F, 0x4A, 0x17, 0x86, 0xF0};
  std::array<uint8_t, 4> nonce {0x00, 0xE0, 0x01, 0x7B};
  AES_block_encrypt_128 aes(key);
  std::vector<uint8_t> msg {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23};
  std::vector<uint8_t> expected_encrypted_msg {0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9, 0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7, 0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36, 0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53, 0x25, 0xB2, 0x07, 0x2F};
  std::vector<uint8_t> encrypted_msg = AES_ChainingStream::encrypt_ctr(q, aes, iv, nonce, msg);
  EXPECT_EQ(encrypted_msg, expected_encrypted_msg) << "encrypt";
  EXPECT_EQ(AES_ChainingStream::encrypt_ctr(q, aes, iv, nonce, encrypted_msg), msg) << "decrypt back";
}


#endif

TEST(AesTest, Aes_128_cbc_encrypt_decrypt_string_with_size_16) {
/*
  this test case based on Case #1 in:
  https://datatracker.ietf.org/doc/html/rfc3602#ref-ESP 
  but with padding.
*/
  std::array<uint8_t, 16> key = {0x06, 0xa9, 0x21, 0x40, 0x36, 0xb8, 0xa1, 0x5b, 0x51, 0x2e, 0x03, 0xd5, 0x34, 0x12, 0x00, 0x06};
  std::array<uint8_t, 16> iv = {0x3d, 0xaf, 0xba, 0x42, 0x9d, 0x9e, 0xb4, 0x30, 0xb4, 0x22, 0xda, 0x80, 0x2c, 0x9f, 0xac, 0x41};
  AES_block_encrypt_128 aes(key);
  std::vector<uint8_t> msg = strToVector("Single block msg");
  std::vector<uint8_t> expected_encrypted_msg = {
    0xe3, 0x53, 0x77, 0x9c, 0x10, 0x79, 0xae, 0xb8, 0x27, 0x08, 0x94, 0x2d, 0xbe, 0x77, 0x18, 0x1a,
    0xb9, 0x7c, 0x82, 0x5e, 0x1c, 0x78, 0x51, 0x46, 0x54, 0x2d, 0x39, 0x69, 0x41, 0xbc, 0xe5, 0x5d};
  
  EXPECT_EQ(AES_ChainingStream::encrypt_cbc(aes, iv, msg), expected_encrypted_msg);
  EXPECT_EQ(AES_ChainingStream::decrypt_cbc(aes,  iv, expected_encrypted_msg), msg);
}



TEST(AesTest, Aes_128_ctr_encrypt_decrypt_string_with_size_16) {
/*
  This test case is Test Vector #1 in:
  https://datatracker.ietf.org/doc/html/rfc3686
*/
  std::array<uint8_t, 16> key = {0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC, 0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E};
  std::array<uint8_t, 8> iv = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  std::array<uint8_t, 4> nonce = {0x00, 0x00, 0x00, 0x30};
  AES_block_encrypt_128 aes(key);
  std::vector<uint8_t> msg = strToVector("Single block msg");
  std::vector<uint8_t> expected_encrypted_msg {0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79, 0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8};
  std::vector<uint8_t> encrypted_msg = AES_ChainingStream::encrypt_ctr(aes, iv, nonce, msg);
  EXPECT_EQ(encrypted_msg, expected_encrypted_msg) << "encrypt";
  EXPECT_EQ(AES_ChainingStream::encrypt_ctr(aes,  iv, nonce, encrypted_msg), msg) << "decrypt back";
}


TEST(AesTest, Aes_128_ctr_encrypt_decrypt_string_36_size) {
/*
  This test case is Test Vector #3 in:
  https://datatracker.ietf.org/doc/html/rfc3686
*/
  std::array<uint8_t, 16> key = {0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8, 0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC};
  std::array<uint8_t, 8> iv = {0x27, 0x77, 0x7F, 0x3F, 0x4A, 0x17, 0x86, 0xF0};
  std::array<uint8_t, 4> nonce = {0x00, 0xE0, 0x01, 0x7B};
  AES_block_encrypt_128 aes(key);
  std::vector<uint8_t> msg {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23};
  std::vector<uint8_t> expected_encrypted_msg = 
    {0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9, 0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7, 0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36, 0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53, 0x25, 0xB2, 0x07, 0x2F};
  std::vector<uint8_t> encrypted_msg = AES_ChainingStream::encrypt_ctr(aes, iv, nonce, msg);
  EXPECT_EQ(encrypted_msg, expected_encrypted_msg) << "encrypt";
  EXPECT_EQ(AES_ChainingStream::encrypt_ctr(aes, iv, nonce, encrypted_msg), msg) << "decrypt back";
}